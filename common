TEST_PREFIX=""

if [ -e /dev/shm ];then
	OUTPUT_DIR=/dev/shm/output
else
	OUTPUT_DIR=/tmp/output
fi
mkdir -p $OUTPUT_DIR

if [ -e /rootfs.version ];then
	echo "=============================================="
	cat /rootfs.version
	echo "=============================================="
	rm /rootfs.version
fi

start_test()
{
	echo "=============================================="
	if [ ! -z "$1" ];then
		echo "$1"
	fi
	echo "=============================================="
	dmesg --console-off
	date +%s > $OUTPUT_DIR/timestamp.test.start
	dmesg > $OUTPUT_DIR/dmesg.test.start
	RET=$?
	if [ $RET -ne 0 ];then
		echo "ERROR: fail to write dmesg (err=$RET)"
		du -ah $OUTPUT_DIR/
	fi
}

result() {
	SLEEP=0
	result=$1
	shift

	case $1 in
	--sleep)
		shift
		SLEEP=$1
		shift
	;;
	esac
	date +%s > $OUTPUT_DIR/timestamp.test.result
	TSTAMP_START=$(cat $OUTPUT_DIR/timestamp.test.start)
	TSTAMP_RESULT=$(cat $OUTPUT_DIR/timestamp.test.result)
	TSTAMP_DIFF=$(($TSTAMP_RESULT-$TSTAMP_START))
	echo "============================================== TIME=$TSTAMP_DIFF"
	# sleep to let dmesg output flushing
	if [ $SLEEP -ge 1 ];then
		sleep $SLEEP
	fi
	dmesg > $OUTPUT_DIR/dmesg.test.result
	RET=$?
	if [ $RET -ne 0 ];then
		echo "ERROR: fail to write dmesg (err=$RET)"
		du -ah $OUTPUT_DIR/
	fi
	diff -u $OUTPUT_DIR/dmesg.test.start $OUTPUT_DIR/dmesg.test.result
	echo "=============================================="
	if [ "$result" == 'SKIP' -o "$result" == 'skip' ];then
		#echo "<LAVA_SIGNAL_TESTCASE $* RESULT=SKIP>"
		lava-test-case $* --result skip
		return
	fi
	if [ $result -eq 127 ];then
		#echo "<LAVA_SIGNAL_TESTCASE $* RESULT=SKIP>"
		lava-test-case $* --result skip
		return
	fi
	if [ $result -eq 0 ];then
		#echo "<LAVA_SIGNAL_TESTCASE $* RESULT=pass>"
		lava-test-case $* --result pass
	else
		#echo "<LAVA_SIGNAL_TESTCASE $* RESULT=FAIL>"
		lava-test-case $* --result fail
	fi
}

# return 0 if an IPv4 address is set
is_network_v4_ok() {
	ip a | grep -v 'inet[[:space:]]127' | grep -v 'inet6' | grep 'inet[[:space:]]'
	if [ $? -eq 0 ];then
		return 0
	fi
	return 1
}

get_machine_model() {
	echo "DEBUG: get_machine_model"
	if [ -e /sys/firmware/devicetree/base/compatible ];then
		cat /sys/firmware/devicetree/base/compatible | tr '\0' '\n' > $OUTPUT_DIR/devicetree
		echo "DEBUG: from devicetree got $(cat /sys/firmware/devicetree/base/compatible)"
	else
		echo "DEBUG: get_machine_model: No devicetree"
	fi
	dmesg | grep 'Machine model:' | sed 's,.*:[[:space:]],,' > $OUTPUT_DIR/machinemodel
	if [ ! -s $OUTPUT_DIR/machinemodel ];then
		# fallback to DMI
		dmesg |grep -o 'DMI:.*' > $OUTPUT_DIR/machinemodel
		if [ ! -s $OUTPUT_DIR/machinemodel ];then
			# last try
			dmesg |grep -qE 'QEMU HARDDISK|QEMU DVD'
			if [ $? -eq 0 ];then
				echo "QEMU-$(uname -m)" > $OUTPUT_DIR/machinemodel
			else
				echo "machine_model_unknow" > $OUTPUT_DIR/machinemodel
			fi
		else
			echo "DEBUG: got machinemodel from DMI"
		fi
	else
		echo "DEBUG: got machinemodel from MM"
	fi
	MACHINE_MODEL=$(cat $OUTPUT_DIR/machinemodel)
	MACHINE_MODEL_=$(cat $OUTPUT_DIR/machinemodel | sed 's,[[:space:]],_,g')
	echo "===MACHINEMODEL==="
	echo $MACHINE_MODEL_
	echo "===MACHINEMODEL_END==="
}

# test if config is enabled
# parameter need to be terminated by =
check_config() {
	if [ ! -e /proc/config.gz ];then
		echo "DEBUG: Cannot check config"
		return 0
	fi
	zgrep -q "^CONFIG_$1" /proc/config.gz
	if [ $? -eq 0 ];then
		echo "DEBUG: $1 is enabled"
		return 0
	fi
	return 1
}
