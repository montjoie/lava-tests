TEST_PREFIX=""

if [ -e /dev/shm ];then
	OUTPUT_DIR=/dev/shm/output
else
	OUTPUT_DIR=/tmp/output
fi
mkdir -p $OUTPUT_DIR
chmod 755 $OUTPUT_DIR
echo "DEBUG: OUTPUT_DIR is $OUTPUT_DIR"

if [ -e /rootfs.version ];then
	echo "=============================================="
	cat /rootfs.version
	echo "=============================================="
	rm /rootfs.version
fi

# Print the start of a test
# register the current dmesg
start_test()
{
	echo "=============================================="
	if [ ! -z "$1" ];then
		echo "$1"
	fi
	echo "=============================================="
	dmesg --console-off
	date +%s > $OUTPUT_DIR/timestamp.test.start
	dmesg > $OUTPUT_DIR/dmesg.test.start
	RET=$?
	if [ $RET -ne 0 ];then
		echo "ERROR: fail to write dmesg (err=$RET)"
		du -ah $OUTPUT_DIR/
	fi
}

# Print the end of a test
# Print all kernel messages that appears durint the test
result() {
	SLEEP=0
	result=$1
	shift

	case $1 in
	--sleep)
		shift
		SLEEP=$1
		shift
	;;
	esac
	date +%s > $OUTPUT_DIR/timestamp.test.result
	TSTAMP_START=$(cat $OUTPUT_DIR/timestamp.test.start)
	TSTAMP_RESULT=$(cat $OUTPUT_DIR/timestamp.test.result)
	TSTAMP_DIFF=$(($TSTAMP_RESULT-$TSTAMP_START))
	echo "============================================== TIME=$TSTAMP_DIFF"
	# sleep to let dmesg output flushing
	if [ $SLEEP -ge 1 ];then
		sleep $SLEEP
	fi
	dmesg > $OUTPUT_DIR/dmesg.test.result
	RET=$?
	if [ $RET -ne 0 ];then
		echo "ERROR: fail to write dmesg (err=$RET)"
		du -ah $OUTPUT_DIR/
	fi
	diff -u $OUTPUT_DIR/dmesg.test.start $OUTPUT_DIR/dmesg.test.result
	echo "=============================================="
	if [ "$result" == 'FAIL' -o "$result" == 'fail' ];then
		lava-test-case $* --result fail
		return
	fi
	if [ "$result" == 'SKIP' -o "$result" == 'skip' ];then
		#echo "<LAVA_SIGNAL_TESTCASE $* RESULT=SKIP>"
		lava-test-case $* --result skip
		return
	fi
	if [ $result -eq 127 ];then
		#echo "<LAVA_SIGNAL_TESTCASE $* RESULT=SKIP>"
		lava-test-case $* --result skip
		return
	fi
	if [ $result -eq 0 ];then
		#echo "<LAVA_SIGNAL_TESTCASE $* RESULT=pass>"
		lava-test-case $* --result pass
	else
		#echo "<LAVA_SIGNAL_TESTCASE $* RESULT=FAIL>"
		lava-test-case $* --result fail
	fi
}

# return 0 if an IPv4 address is set
is_network_v4_ok() {
	ip a | grep -v 'inet[[:space:]]127' | grep -v 'inet6' | grep 'inet[[:space:]]'
	if [ $? -eq 0 ];then
		return 0
	fi
	return 1
}

get_machine_model() {
	echo "DEBUG: get_machine_model"
	if [ -e /sys/firmware/devicetree/base/compatible ];then
		cat /sys/firmware/devicetree/base/compatible | tr '\0' '\n' > $OUTPUT_DIR/devicetree
		echo "DEBUG: from devicetree got $(cat /sys/firmware/devicetree/base/compatible)"
	else
		echo "DEBUG: get_machine_model: No devicetree"
	fi
	dmesg | grep 'Machine model:' | sed 's,.*:[[:space:]],,' > $OUTPUT_DIR/machinemodel
	if [ ! -s $OUTPUT_DIR/machinemodel ];then
		# fallback to DMI
		dmesg |grep -o 'DMI:.*' > $OUTPUT_DIR/machinemodel
		if [ ! -s $OUTPUT_DIR/machinemodel ];then
			# last try
			dmesg |grep -qE 'QEMU HARDDISK|QEMU DVD'
			if [ $? -eq 0 ];then
				echo "QEMU-$(uname -m)" > $OUTPUT_DIR/machinemodel
				if [ -s $OUTPUT_DIR/devicetree ];then
					echo "QEMU-$(uname -m)-$(cat $OUTPUT_DIR/devicetree)" > $OUTPUT_DIR/machinemodel
				fi
			else
				echo "machine_model_unknow" > $OUTPUT_DIR/machinemodel
			fi
		else
			echo "DEBUG: got machinemodel from DMI"
		fi
	else
		echo "DEBUG: got machinemodel from MM"
	fi
	MACHINE_MODEL=$(cat $OUTPUT_DIR/machinemodel)
	MACHINE_MODEL_=$(cat $OUTPUT_DIR/machinemodel | sed 's,[[:space:]],_,g' | sed 's,/,_,g')
	echo "===MACHINEMODEL==="
	echo $MACHINE_MODEL_
	echo "===MACHINEMODEL_END==="
}

# test if config is enabled
# parameter need to be terminated by =
check_config() {
	if [ ! -e /proc/config.gz ];then
		echo "DEBUG: Cannot check config (Missing /proc/config.gz)"
		return 0
	fi
	zgrep -q "^CONFIG_$1" /proc/config.gz
	RET=$?
	if [ $RET -eq 0 ];then
		echo "DEBUG: $1 is enabled"
		return 0
	fi
	if [ $RET -eq 127 ];then
		gunzip -c /proc/config.gz > "$OUTPUT_DIR/config"
		grep -q "^CONFIG_$1" "$OUTPUT_DIR/config"
		RET=$?
		rm "$OUTPUT_DIR/config"
		if [ $RET -eq 0 ];then
			echo "DEBUG: $1 is enabled"
			return 0
		fi
	fi
	return 1
}

print_crypto_stat()
{
	echo "DEBUG: check for crypto stats"
	mount -t debugfs none /sys/kernel/debug
	for dirstat in gxl-crypto amlogic-crypto sun8i-ce sun8i-ss sun4i-ss
	do
		echo "DEBUG: test cryptostat $dirstat"
		if [ -e /sys/kernel/debug/$dirstat/stats ];then
			cat /sys/kernel/debug/$dirstat/stats
		fi
	done
	find /sys/kernel/debug/ |grep -i caam
	echo "DEBUG: end of stats"
}

try_run()
{
	STATUS=""
	ESTATUS=""
	TIMEOUT=120
	SLEEP=1
	if [ "$1" == '-t' ];then
		shift
		TIMEOUT=$1
		shift
	fi
	if [ "$1" = '-s' ];then
		shift
		STATUS="$1"
		shift
	fi
	if [ "$1" = '-se' ];then
		shift
		ESTATUS="$1"
		shift
	fi
	if [ "$1" = '-S' ];then
		shift
		SLEEP="$1"
		shift
	fi
	rm -f $OUTPUT_DIR/try.end
	echo "#!/bin/sh
	$*
	RET=\$?
	echo \$RET > $OUTPUT_DIR/try.end
	exit \$RET
	" > $OUTPUT_DIR/try.sh
	chmod 755 $OUTPUT_DIR/try.sh

	echo "DEBUG: ===================="
	cat $OUTPUT_DIR/try.sh
	mount |grep -q /dev/shm
	if [ $? -eq 0 ];then
		mount |grep /dev/shm |grep -q noexec
		if [ $? -eq 0 ];then
			echo "INFO: remount /dev/shm"
			mount -o remount rw /dev/shm
		fi
	fi
	echo "DEBUG: ===================="

	$OUTPUT_DIR/try.sh&
	PID=$!

	timeelapsed=0
	while [ $timeelapsed -le $TIMEOUT ]
	do
		if [ -e $OUTPUT_DIR/try.end ];then
			break
		fi
		kill -0 $PID
		if [ $? -ne 0 ];then
			break
		fi
		sleep $SLEEP
		if [ ! -z "$STATUS" ];then
			cat $STATUS
		fi
		if [ ! -z "$ESTATUS" ];then
			export COLUMNS=300
			ps aux
			dmesg | tail
		fi
		timeelapsed=$(($timeelapsed+1))
	done
	if [ $timeelapsed -ge $TIMEOUT ];then
		echo "ERROR: try $* timeout!"
		RET=1
		dmesg
		ps aux
		kill $PID
	else
		RET=$(cat $OUTPUT_DIR/try.end)
		echo "DEBUG: try exit ret=$RET after $timeelapsed seconds"
	fi
	return $RET
}

# check if a tool is present
check_tool() {
	case "$1" in
	ip)
		ip -Version 2>/dev/null >"$OUTPUT_DIR/ip-version"
		RET=$?
		if [ $RET -eq 0 ];then
			cat "$OUTPUT_DIR/ip-version"
			return 0
		fi

		#ip -Version does not work on busybox
		ip link show 2>/dev/null >/dev/null
		return $?
	;;
	ethtool)
		ethtool --version
		return $?
	;;
	*)
		echo "ERROR: unknown tool $1"
		return 1
	;;
	esac
	return 1
}
